package com.nagihong.mvp.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nagihong.mvp.model.DocumentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOCUMENT_BEAN".
*/
public class DocumentBeanDao extends AbstractDao<DocumentBean, Long> {

    public static final String TABLENAME = "DOCUMENT_BEAN";

    /**
     * Properties of entity DocumentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SupportPreview = new Property(1, boolean.class, "supportPreview", false, "SUPPORT_PREVIEW");
        public final static Property SupportShare = new Property(2, boolean.class, "supportShare", false, "SUPPORT_SHARE");
        public final static Property LinkApp = new Property(3, String.class, "linkApp", false, "LINK_APP");
        public final static Property IconType = new Property(4, int.class, "iconType", false, "ICON_TYPE");
    }


    public DocumentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DocumentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCUMENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SUPPORT_PREVIEW\" INTEGER NOT NULL ," + // 1: supportPreview
                "\"SUPPORT_SHARE\" INTEGER NOT NULL ," + // 2: supportShare
                "\"LINK_APP\" TEXT," + // 3: linkApp
                "\"ICON_TYPE\" INTEGER NOT NULL );"); // 4: iconType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCUMENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DocumentBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSupportPreview() ? 1L: 0L);
        stmt.bindLong(3, entity.getSupportShare() ? 1L: 0L);
 
        String linkApp = entity.getLinkApp();
        if (linkApp != null) {
            stmt.bindString(4, linkApp);
        }
        stmt.bindLong(5, entity.getIconType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DocumentBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSupportPreview() ? 1L: 0L);
        stmt.bindLong(3, entity.getSupportShare() ? 1L: 0L);
 
        String linkApp = entity.getLinkApp();
        if (linkApp != null) {
            stmt.bindString(4, linkApp);
        }
        stmt.bindLong(5, entity.getIconType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DocumentBean readEntity(Cursor cursor, int offset) {
        DocumentBean entity = new DocumentBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // supportPreview
            cursor.getShort(offset + 2) != 0, // supportShare
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // linkApp
            cursor.getInt(offset + 4) // iconType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DocumentBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSupportPreview(cursor.getShort(offset + 1) != 0);
        entity.setSupportShare(cursor.getShort(offset + 2) != 0);
        entity.setLinkApp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIconType(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DocumentBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DocumentBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DocumentBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
