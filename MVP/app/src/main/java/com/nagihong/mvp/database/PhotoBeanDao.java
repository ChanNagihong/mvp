package com.nagihong.mvp.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nagihong.mvp.model.PhotoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_BEAN".
*/
public class PhotoBeanDao extends AbstractDao<PhotoBean, Long> {

    public static final String TABLENAME = "PHOTO_BEAN";

    /**
     * Properties of entity PhotoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Location = new Property(1, String.class, "location", false, "LOCATION");
        public final static Property Width = new Property(2, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(3, int.class, "height", false, "HEIGHT");
        public final static Property DeviceMake = new Property(4, String.class, "deviceMake", false, "DEVICE_MAKE");
        public final static Property DeviceModel = new Property(5, String.class, "deviceModel", false, "DEVICE_MODEL");
        public final static Property ColorSpace = new Property(6, String.class, "colorSpace", false, "COLOR_SPACE");
        public final static Property ColorProfile = new Property(7, String.class, "colorProfile", false, "COLOR_PROFILE");
        public final static Property FocalLength = new Property(8, int.class, "focalLength", false, "FOCAL_LENGTH");
        public final static Property AlphaChannel = new Property(9, boolean.class, "alphaChannel", false, "ALPHA_CHANNEL");
        public final static Property RedEye = new Property(10, boolean.class, "redEye", false, "RED_EYE");
        public final static Property FNumber = new Property(11, float.class, "fNumber", false, "F_NUMBER");
        public final static Property ExposureProgram = new Property(12, int.class, "exposureProgram", false, "EXPOSURE_PROGRAM");
        public final static Property ExposureTime = new Property(13, String.class, "exposureTime", false, "EXPOSURE_TIME");
    }


    public PhotoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOCATION\" TEXT," + // 1: location
                "\"WIDTH\" INTEGER NOT NULL ," + // 2: width
                "\"HEIGHT\" INTEGER NOT NULL ," + // 3: height
                "\"DEVICE_MAKE\" TEXT," + // 4: deviceMake
                "\"DEVICE_MODEL\" TEXT," + // 5: deviceModel
                "\"COLOR_SPACE\" TEXT," + // 6: colorSpace
                "\"COLOR_PROFILE\" TEXT," + // 7: colorProfile
                "\"FOCAL_LENGTH\" INTEGER NOT NULL ," + // 8: focalLength
                "\"ALPHA_CHANNEL\" INTEGER NOT NULL ," + // 9: alphaChannel
                "\"RED_EYE\" INTEGER NOT NULL ," + // 10: redEye
                "\"F_NUMBER\" REAL NOT NULL ," + // 11: fNumber
                "\"EXPOSURE_PROGRAM\" INTEGER NOT NULL ," + // 12: exposureProgram
                "\"EXPOSURE_TIME\" TEXT);"); // 13: exposureTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(2, location);
        }
        stmt.bindLong(3, entity.getWidth());
        stmt.bindLong(4, entity.getHeight());
 
        String deviceMake = entity.getDeviceMake();
        if (deviceMake != null) {
            stmt.bindString(5, deviceMake);
        }
 
        String deviceModel = entity.getDeviceModel();
        if (deviceModel != null) {
            stmt.bindString(6, deviceModel);
        }
 
        String colorSpace = entity.getColorSpace();
        if (colorSpace != null) {
            stmt.bindString(7, colorSpace);
        }
 
        String colorProfile = entity.getColorProfile();
        if (colorProfile != null) {
            stmt.bindString(8, colorProfile);
        }
        stmt.bindLong(9, entity.getFocalLength());
        stmt.bindLong(10, entity.getAlphaChannel() ? 1L: 0L);
        stmt.bindLong(11, entity.getRedEye() ? 1L: 0L);
        stmt.bindDouble(12, entity.getFNumber());
        stmt.bindLong(13, entity.getExposureProgram());
 
        String exposureTime = entity.getExposureTime();
        if (exposureTime != null) {
            stmt.bindString(14, exposureTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(2, location);
        }
        stmt.bindLong(3, entity.getWidth());
        stmt.bindLong(4, entity.getHeight());
 
        String deviceMake = entity.getDeviceMake();
        if (deviceMake != null) {
            stmt.bindString(5, deviceMake);
        }
 
        String deviceModel = entity.getDeviceModel();
        if (deviceModel != null) {
            stmt.bindString(6, deviceModel);
        }
 
        String colorSpace = entity.getColorSpace();
        if (colorSpace != null) {
            stmt.bindString(7, colorSpace);
        }
 
        String colorProfile = entity.getColorProfile();
        if (colorProfile != null) {
            stmt.bindString(8, colorProfile);
        }
        stmt.bindLong(9, entity.getFocalLength());
        stmt.bindLong(10, entity.getAlphaChannel() ? 1L: 0L);
        stmt.bindLong(11, entity.getRedEye() ? 1L: 0L);
        stmt.bindDouble(12, entity.getFNumber());
        stmt.bindLong(13, entity.getExposureProgram());
 
        String exposureTime = entity.getExposureTime();
        if (exposureTime != null) {
            stmt.bindString(14, exposureTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoBean readEntity(Cursor cursor, int offset) {
        PhotoBean entity = new PhotoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // location
            cursor.getInt(offset + 2), // width
            cursor.getInt(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceMake
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceModel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // colorSpace
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // colorProfile
            cursor.getInt(offset + 8), // focalLength
            cursor.getShort(offset + 9) != 0, // alphaChannel
            cursor.getShort(offset + 10) != 0, // redEye
            cursor.getFloat(offset + 11), // fNumber
            cursor.getInt(offset + 12), // exposureProgram
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // exposureTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWidth(cursor.getInt(offset + 2));
        entity.setHeight(cursor.getInt(offset + 3));
        entity.setDeviceMake(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceModel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setColorSpace(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setColorProfile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFocalLength(cursor.getInt(offset + 8));
        entity.setAlphaChannel(cursor.getShort(offset + 9) != 0);
        entity.setRedEye(cursor.getShort(offset + 10) != 0);
        entity.setFNumber(cursor.getFloat(offset + 11));
        entity.setExposureProgram(cursor.getInt(offset + 12));
        entity.setExposureTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
